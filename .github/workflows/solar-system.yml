name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
  unit-testing:
    name: Unit Testing
    # Comment: Another concept is a "service container" - if a test step for instance relies on
    #          interacting with another service (e.g. MongoDB database), a service container
    #          can be spun up which the main code can interact with.
    #          Code commented out below has been added as an example.
    # # services:
    # #   mongo-db:
    # #     image: siddharth67/mongo-db:non-prod
    # #     ports:
    # #       - 27017:27017
    # #     options:  # NB: If running both job and service in container, port mapping is not needed, and you can refer the container name instead
    # #       --name mongo  # container name - useful for if we also run the job in a container
    # # env:
    # #   MONGO_URI: 'mongodb://localhost:27017/superData' / 'mongodb://mongo:27017/superData' # last on if job in container
    # #   MONGO_USERNAME: non-prod-user
    # #   MONGO_PASSWORD: non-prod-password
    
    # Comment: Can use "strategy" combined with "matrix" to specify that we want to run a job
    #          across a combination of configurations.
    #          Code commented out below as example.
    #          NB: Where you use e.g. node version (i.e. in container step above), you have to
    #              change it to use the value from the matrix setup below. Same for operating system.
    # # strategy:
    # #   matrix:
    # #     nodejs_version: [18, 20]
    # #     os: [ubuntu-latest, macos-latest]
    # #     exclude:
    # #       - nodejs_version: 18
    # #         os: macos-latest

    # Comment: This job uses a "job container", meaning a container image is specified,
    #          and a container is started within which the job is run.
    #
    # # container:
    # #   image: node:20 # node:${{ matrix.nodejs_version }}
    
    runs-on: ubuntu-latest # ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup NodeJS Version
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 20
      
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        run: npm test
        
      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install Dependencies
        run: npm install
      
      - name: Code Coverage
        run: npm run coverage
        continue-on-error: true
      
      - name: Upload code-coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 7
  
  docker:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: '${{ github.repository_owner }}'
          password: '${{ secrets.GITHUB_TOKEN }}'
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: 'ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}'
  
  dev-deploy:
    runs-on: ubuntu-latest
    needs: docker
    environment:
      name: development
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install Kubectl
        uses: azure/setup-kubectl@v3
        with:
           version: 'v1.26.0'
      
      - name: Verify Kubectl
        run: kubectl version --short
      
      # - name: Set Kube Context
      #   uses: azure/k8s-set-context@v3
      #   with:
      #     method: kubeconfig
      #     kubeconfig: '${{ secrets.KUBECONFIG }}'
      
      # - name: Verify Kubectl
      #   run: kubectl version --short -o yaml